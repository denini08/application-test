package br.fakecompany.projectX;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.sql.rowset.serial.SerialArray;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertEquals;

import org.junit.Ignore;
import org.junit.Test;


public class DeniniTest
{
    //mvn test
    //Teste Isprime e  isListlnAscendingOrder tipos de teste para eu fazer professor mandou
    private MyUtils myUtils = new MyUtils();


    ///fatorial
    @Test
    public void testFatorial(){
        int result = 5;
        assertEquals(120, myUtils.factorial(result));
        assertEquals(0, myUtils.factorial(result));
        assertEquals(125, myUtils.factorial(result));  
        assertNull(0, myUtils.factorial(result)); 
    }

    @Test( expected = IllegalArgumentException.class)
    public void testFactorialNegative(){
        myUtils.factorial(-32);
    }

    //Teste FindEvenNumbers
    @Test
    public void test2FindEvenNumbers(){
         // Testa com lista vazia
         // Deve retornar uma lista vazia

         List<Integer> novalista = new ArrayList<>();
         List<Integer> resultadoLista = myUtils.findEvenNumbers(novalista);
         assertEquals(novalista, resultadoLista);

         List<Integer> novalista = new Arrays.asList(2,4,8,10);
         List<Integer> resultadoLista = myUtils.findEvenNumbers(novalista);
         assertEquals(emptyList, resultadoLista);

         List<Integer> novalista = new Arrays.asList(8,10,20,18);
         List<Integer> resultadoLista = myUtils.findEvenNumbers(novalista);
         assertEquals(emptyList, resultadoLista);


        List<Integer> listImpar= Arrays.asList(12,14,18,20);
        List<Integer> resultadoList = myUtils.findEvenNumbers(listImpar);
        assertEquals(listImpar, resultadoList );

        List<Integer> ListnumbImpa = Arrays.asList(3,13,17,20,14,12);
        List<Integer> resultoImpar = myUtils.findEvenNumbers(ListnumbImp);
        assertEquals(Arrays.asList(3,13,17), resultoImpar);


        //Teste do isPrime 
        @Test
        public void  isPrime (){

            int num = 3;
            assertTrue(myUtils.isPrime(num));
            int num = 2;
            assertTrue(myUtils.isPrime(num));
            int num = 4;
            assertFalse(myUtils.isPrime(num));
            int num = 8;
            assertFalse(myUtils.isPrime(num));
            int num = 12;
            assertFalse(myUtils.isPrime(num));
            int num = 14;
            assertFalse(myUtils.isPrime(num));
        }

        @Test
        public void  isListlnAscendingOrder(){

            List<Integer>  listCrescente = Arrays.asList(1,2,3,4,5,6);
            boolean resultCrescente = myUtils.isListInAscendingOrder(listCrescente);
            assertTrue(resultCrescente);

            List<Integer>  listDecrecente = Arrays.asList(6,5,4,3,2,1);
            boolean resultDecrescente = myUtils.isListInAscendingOrder(listDecrecente);
            assertFalse(resultDecrescente);

            List<Integer>  listCrescente = Arrays.asList(7,8,9,10,11,12);
            boolean resultCrescente = myUtils.isListInAscendingOrder(listCrescente);
            assertTrue(resultCrescente);

            List<Integer>  listDecrecente = Arrays.asList(12,11,10,9,8,7);
            boolean resultDecrescente = myUtils.isListInAscendingOrder(listDecrecente);
            assertFalse(resultDecrescente);

            List<Integer>  listCrescente = Arrays.asList(30,31,32,33,34);
            boolean resultCrescente = myUtils.isListInAscendingOrder(listCrescente);
            assertTrue(resultCrescente);

            List<Integer>  listDecrecente = Arrays.asList(34,33,32,31,30);
            boolean resultDecrescente = myUtils.isListInAscendingOrder(listDecrecente);
            assertFalse(resultDecrescente);

            List<Integer>  listDecrecente = Arrays.asList(13,15,17,21);
            boolean resultDecrescente = myUtils.isListInAscendingOrder(listDecrecente);
            assertFalse(resultDecrescente);

            List<Integer>  listCrescente = Arrays.asList(12,13,14,15);
            boolean resultCrescente = myUtils.isListInAscendingOrder(listCrescente);
            assertTrue(resultCrescente);

           
            

        }


}
